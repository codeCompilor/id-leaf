
#属性注入类文件是：com.sankuai.inf.leaf.plugin.LeafSpringBootProperties

#leaf.name：leaf 服务名，用于zookeeper的保存路径
#com.sankuai.inf.leaf.common.PropertyFactory
leaf.name=leaf_id

#分段模式
#配置Mysql数据库连接的Url、账号、密码（仅支持Mysql数据库，要先执行脚本创建数据库和表）
leaf.segment.enable=true
leaf.segment.url=jdbc:mysql://localhost:3307/leaf?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2B8&pinGlobalTxToPhysicalConnection=true&autoReconnect=true
#com.mysql.cj.jdbc.Driver
#com.mysql.jdbc.Driver
##官网是没有leaf.segment.driver-class-name，后面自己加的，用于适配Mysql 8的连接
leaf.segment.driver-class-name=com.mysql.cj.jdbc.Driver
leaf.segment.username=root
leaf.segment.password=root

#雪花算法ID
#当然，为了追求更高的性能，需要通过RPC Server来部署Leaf 服务，那仅需要引入leaf-core的包，把生成ID的API封装到指定的RPC框架中即可。
#是否开启snowflake模式，默认是false
leaf.snowflake.enable=true
#leaf.snowflake.address：snowflake模式下的zk地址，包括IP和端口
leaf.snowflake.address=192.168.170.14:2181
#leaf.snowflake.port：snowflake模式下的服务注册端口（非Zk端口）
#leaf.snowflake.port就是leaf项目的访问端口
#例如你在一台服务器上部署了多个leaf服务，每个leaf服务的HTTP服务访问端口不一样，
#那么在使用snowflake模式生成ID时，每个leaf服务都会有一个唯一的workId进行区分，来防止id重复，
#这个workId就是个根据服务所在的服务器Ip+服务端口leaf.snowflake.port来唯一确定的，
#主要通过将ip:port以写入到zookeeper特定路径下，写入一个永久有序节点，会生成一个唯一的序列号，
#这个序列作为这个leaf服务的workId，以后再在这个ip的服务器上以这个端口启动leaf服务，
#会根据ip和端口去Zookeeper找到以前生成的对应的workId，进行使用
#示例：
#[zk: localhost:2181(CONNECTED) 7] get /snowflake/null/forever/168.168.2.120:9600-0000000002 
#{"ip":"168.168.2.120","port":"9600","timestamp":1621225915118}
leaf.snowflake.port=9600
